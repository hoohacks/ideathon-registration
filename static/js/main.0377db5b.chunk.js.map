{"version":3,"sources":["images/logo.png","firebase.js","Registration.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","console","log","process","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","getStorage","getDatabase","getAuth","Registration","_ref","theme","createTheme","palette","secondary","main","primary","warning","error","info","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","_useState15","_useState16","_useState17","_useState18","_useState19","_useState20","_useState21","_useState22","_useState23","_useState24","_useState25","_useState26","_useState27","_useState28","_useState29","_useState30","_useState31","_useState32","_useState33","_useState34","_useState35","_useState36","_useState37","_useState38","_useState39","_useState40","_useState41","_useState42","_useState43","_useState44","_useState45","_useState46","_useState47","_useState48","_useState49","_useState50","_useState51","_useState52","_useState53","_useState54","successRegistration","react_default","a","createElement","Fragment","ThemeProvider","reactjs_popup_esm","open","modal","Box","sx","borderRadius","textAlign","padding","display","flexFlow","gap","Typography","Link","href","Button","backgroundColor","color","boxShadow","&:hover","transform","border","borderColor","type","Grid","container","spacing","direction","alignItems","justifyContent","style","minHeight","minWidth","width","marginLeft","marginRight","Card","margin","defineProperty","breakpoints","down","maxWidth","src","Logo","objectFit","fontWeight","variant","align","marginTop","Date","getFullYear","reportWebVitals","onPerfEntry","Function","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_Registration","route"],"mappings":"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","file":"static/js/main.0377db5b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8887ae4c.png\";","// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\nimport { getDatabase } from \"firebase/database\";\r\nimport { getStorage } from \"firebase/storage\";\r\nimport { getAuth } from \"firebase/auth\";\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\nconsole.log(process.env.REACT_APP_API_KEY)\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAFHTfN6KuOwzDsLdWtmZeFAVpVcI-Npfw\",\r\n    authDomain: \"ideathon-registration-form.firebaseapp.com\",\r\n    databaseURL: \"https://ideathon-registration-form-default-rtdb.firebaseio.com\",\r\n    projectId: \"ideathon-registration-form\",\r\n    storageBucket: \"ideathon-registration-form.appspot.com\",\r\n    messagingSenderId: \"1094596378197\",\r\n    appId: \"1:1094596378197:web:81887879503a76e09c5edc\",\r\n    measurementId: \"G-JSB5Q51DBG\"\r\n};\r\n\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nexport const storage = getStorage(app);\r\nexport const database = getDatabase(app);\r\nexport const auth = getAuth(app);","import React, { isValidElement, useState } from 'react';\r\n\r\n// firebase \r\nimport firebase from \"firebase/compat/app\";\r\nimport \"firebase/compat/firestore\";\r\nimport { database, storage } from './firebase';\r\nimport { ref, push, child, update } from \"firebase/database\";\r\nimport { uploadBytesResumable, getDownloadURL } from 'firebase/storage';\r\nimport { ref as storageRef } from 'firebase/storage'; // avoid naming issues\r\n\r\n// react pop up\r\nimport { Popup } from 'reactjs-popup';\r\nimport 'reactjs-popup/dist/index.css';\r\n\r\n// import mui styling\r\nimport {\r\n    Box,\r\n    Card,\r\n    Typography,\r\n    InputLabel,\r\n    TextField,\r\n    Select,\r\n    MenuItem,\r\n    LinearProgress,\r\n    Button,\r\n    Checkbox,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormControl,\r\n    Grid,\r\n    Link,\r\n    RadioGroup,\r\n    Radio,\r\n    FormHelperText\r\n} from '@mui/material';\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\r\n\r\n// import logo\r\nimport Logo from \"./images/logo.png\";\r\nimport { maxWidth } from '@mui/system';\r\n\r\n// email format \r\nconst mailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n\r\nconst Registration = () => {\r\n\r\n    // theme\r\n    const theme = createTheme({\r\n        palette: {\r\n            secondary: {\r\n                main: '#f82249'\r\n            },\r\n            primary: {\r\n                main: '#ff9daf'\r\n            },\r\n            warning: {\r\n                main: '#f82249'\r\n            },\r\n            error: {\r\n                main: '#f82249'\r\n            },\r\n            info: {\r\n                main: '#f82249'\r\n            }\r\n        }\r\n    });\r\n\r\n    // text-fields\r\n    const [firstName, setFirstName] = useState('');\r\n    const [firstNameCheck, setFirstNameCheck] = useState(false);\r\n    const [lastName, setLastName] = useState('');\r\n    const [lastNameCheck, setLastNameCheck] = useState(false);\r\n    const [email, setEmail] = useState('');\r\n    const [emailCheck, setEmailCheck] = useState(false);\r\n    const [skills, setSkills] = useState('');\r\n    const [skillsCheck, setSkillsCheck] = useState(false);\r\n    const [major, setMajor] = useState('');\r\n    const [majorCheck, setMajorCheck] = useState(false);\r\n    const [learn, setLearn] = useState('');\r\n    const [learnCheck, setLearnCheck] = useState(false);\r\n\r\n    // gender\r\n    const [gender, setGender] = useState(null);\r\n    const [genderCheck, setGenderCheck] = useState(false);\r\n\r\n    // email check\r\n    const [isValidEmail, setIsValidEmail] = useState(true);\r\n\r\n    // dietary restrictions\r\n    const [dietaryRestriction, setDietaryRestriction] = useState([]);\r\n    const [otherDietaryRestriction, setOtherDietaryRestriction] = useState('');\r\n    const [otherDietaryRestrictionCheck, setOtherDietaryRestrictionCheck] = useState(false);\r\n\r\n    // year\r\n    const [selectYear, setSelectYear] = useState(2023);\r\n    const [otherSelectYear, setOtherSelectYear] = useState('');\r\n    const [otherSelectYearCheck, setOtherSelectYearCheck] = useState('');\r\n\r\n    // school\r\n    const [selectSchool, setSelectedSchool] = useState('college');\r\n\r\n    // resume upload\r\n    const [resumeName, setResumeName] = useState();\r\n    const [uploadResume, setUploadResume] = useState();\r\n    const [isResumePicked, setIsResumePicked] = useState(false);\r\n    const [progress, setProgress] = useState(0);\r\n\r\n    // successful registration upload\r\n    const [successRegistration, setSuccessRegistration] = useState(false);\r\n\r\n    const changeResumeHandle = (event) => {\r\n        const storageReference = storageRef(storage, `/ideathon-resume/${selectYear}/${event.target.files[0].name}`);\r\n        const uploadResumeToDB = uploadBytesResumable(storageReference, event.target.files[0]);\r\n\r\n        uploadResumeToDB.on(\"state_changed\", (snapshot) => {\r\n            setProgress((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\r\n            setUploadResume(uploadResumeToDB);\r\n        });\r\n\r\n        setResumeName(event.target.files[0].name);\r\n        setIsResumePicked(true);\r\n    };\r\n\r\n\r\n    // add multiple dietary restrictions\r\n    const selectRestrictions = (event) => {\r\n\r\n\r\n        if (dietaryRestriction.includes(event.target.value)) {\r\n            setDietaryRestriction(current => current.filter(diet => diet !== event.target.value))\r\n        }\r\n        else {\r\n            setDietaryRestriction(current => [...current, event.target.value]);\r\n        }\r\n\r\n    };\r\n\r\n    async function handleSubmit() {\r\n\r\n\r\n        // update dietary restrictions with other value\r\n        var dietRestriction = dietaryRestriction;\r\n        if (otherDietaryRestriction !== '') {\r\n            dietRestriction.push(otherDietaryRestriction);\r\n        }\r\n\r\n\r\n        // checks if resume has been uploaded yet or not\r\n        if (progress === 100 && isResumePicked) {\r\n\r\n\r\n            // download url\r\n            const url = await getDownloadURL(uploadResume.snapshot.ref);\r\n\r\n            let applicant = {\r\n                firstName: firstName,\r\n                lastName: lastName,\r\n                email: email,\r\n                schoolYear: selectYear === 0 ? otherSelectYear : selectYear,\r\n                uvaSchool: selectSchool,\r\n                resume: url,\r\n                skills: skills,\r\n                gender: gender,\r\n                learn: learn,\r\n                major: major,\r\n                registeredAt: firebase.firestore.Timestamp.now().toDate().toString(),\r\n                dietaryRestriction: dietRestriction.length === 0 ? \"none\" : dietRestriction,\r\n            };\r\n\r\n            const newPostKey = push(child(ref(database), 'posts')).key;\r\n            const updates = {};\r\n            updates['/' + newPostKey] = applicant;\r\n            return update(ref(database), updates).then(() => setSuccessRegistration(true)).catch((error) => { console.warn(error) });\r\n        } else { // for when no resume is selected\r\n\r\n\r\n            let applicant = {\r\n                firstName: firstName,\r\n                lastName: lastName,\r\n                email: email,\r\n                schoolYear: selectYear === 0 ? otherSelectYear : selectYear,\r\n                uvaSchool: selectSchool,\r\n                resume: \"none\",\r\n                skills: skills,\r\n                gender: gender,\r\n                learn: learn,\r\n                major: major,\r\n                registeredAt: firebase.firestore.Timestamp.now().toDate().toString(),\r\n                dietaryRestriction: dietRestriction.length === 0 ? \"none\" : dietRestriction,\r\n            };\r\n\r\n            const newPostKey = push(child(ref(database), 'posts')).key;\r\n            const updates = {};\r\n            updates['/' + newPostKey] = applicant;\r\n            return update(ref(database), updates).then(() => setSuccessRegistration(true)).catch((error) => { console.warn(error) });\r\n        }\r\n    }\r\n\r\n\r\n    function Copyright() {\r\n        return (\r\n            <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" sx={{ marginTop: \"10px\" }}>\r\n                {'Copyright © '}\r\n                <Link color=\"inherit\" href=\"https://ideathon.hoohacks.io\">\r\n                    Hoohacks Ideathon\r\n                </Link>{' '}\r\n                {new Date().getFullYear()}\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ThemeProvider theme={theme}>\r\n\r\n                <Popup\r\n                    open={successRegistration}\r\n                    modal\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            borderRadius: \"5px\",\r\n                            textAlign: \"center\",\r\n                            padding: \"15px\",\r\n                            display: \"flex\",\r\n                            flexFlow: \"column\",\r\n                            gap: \"8px\",\r\n                        }}\r\n                    >\r\n                        <Typography>Successfully signed up for Ideathon 23-24!</Typography>\r\n                        <Link href='https://ideathon.hoohacks.io'>\r\n                            <Button\r\n                                sx={{\r\n                                    backgroundColor: \"#f82249\",\r\n                                    color: \"#fff\",\r\n                                    boxShadow: 2,\r\n                                    \"&:hover\": {\r\n                                        transform: \"scale3d(1.05, 1.05, 1)\",\r\n                                        backgroundColor: \"#fff\",\r\n                                        color: \"#f82249\",\r\n                                        border: \"1px solid\",\r\n                                        borderColor: \"#f82249\",\r\n                                    }\r\n                                }}\r\n                                type=\"button\"\r\n                            >\r\n                                View Schedule\r\n                            </Button>\r\n                        </Link>\r\n                    </Box>\r\n                </Popup>\r\n                <Grid\r\n                    container\r\n                    spacing={0}\r\n                    direction=\"column\"\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"center\"\r\n                    style={{ minHeight: '100vh', minWidth: '100wh' }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            width: \"100%\",\r\n                            justifyContent: \"center\",\r\n                            alignItems: \"center\",\r\n                            marginLeft: \"auto\",\r\n                            marginRight: \"auto\",\r\n                            display: \"flex\",\r\n                        }}\r\n                    >\r\n                        <Card\r\n                            sx={{\r\n                                boxShadow: 4,\r\n                                display: \"flex\",\r\n                                flexFlow: \"column nowrap\",\r\n                                margin: \"24px\",\r\n                                width: \"582px\",\r\n                                alignItems: \"center\",\r\n                                backgroundColor: \"#fff\",\r\n                                padding: \"22px 22px\",\r\n                                gap: \"16px\",\r\n                                border: \"none\",\r\n                                boxShadow: \"none\",\r\n                                [theme.breakpoints.down('md')]: {\r\n                                    margin: \"0\",\r\n                                }\r\n                            }}\r\n                        >\r\n\r\n                            {/* IDEATHON LOGO */}\r\n                            <Link \r\n                                href=\"https://ideathon.hoohacks.io\"\r\n                                sx={{\r\n\r\n                                    maxWidth: \"582px\",\r\n                                    [theme.breakpoints.down('md')]: {\r\n                                        maxWidth: \"402px\",\r\n                                        \r\n                                    }\r\n                                }} \r\n                            >\r\n                                <img\r\n                                    src={Logo}\r\n                                    style={{\r\n                                        borderRadius: \"5px\",\r\n                                        width: \"582px\",\r\n                                        objectFit: \"cover\",\r\n                                        [theme.breakpoints.down('md')]: {\r\n                                            width: \"402px\",\r\n                                        }\r\n                                    }}\r\n\r\n                                />\r\n                            </Link>\r\n\r\n\r\n                            <Typography sx={{textAlign: \"center\"}}>\r\n                                The fifth annual Ideathon, <span style={{fontWeight: 'bold'}}>Saturday October 14, 2023</span>, is a networking, team-building, and pitching event designed to help students with \r\n                                technical experience and students with business experience build their technical business ideas.  Student teams \r\n                                can meet 1:1 with industry experts about their ideas and form long lasting relationships with them as they \r\n                                continue to grow their ideas. Corporate sponsors will be holding workshops to teach students about pitching \r\n                                their ideas, valuing their potential businesses, and building technical prototypes. There will be a two hour pitch \r\n                                event, where teams will pitch to a board of sponsors for funding. Teams will have the opportunity to win thousands \r\n                                of dollars in funding in order to bring their idea to fruition! \r\n                            </Typography>\r\n\r\n                            {/* <Box\r\n                                sx={{\r\n                                    width: \"100%\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"row nowrap\",\r\n                                    justifyContent: \"center\",\r\n                                    gap: \"8px\"\r\n                                }}\r\n                            >\r\n                                <TextField\r\n                                    fullWidth={true}\r\n                                    required\r\n                                    id=\"first-name\"\r\n                                    name=\"first-name\"\r\n                                    label=\"First Name\"\r\n                                    variant=\"outlined\"\r\n                                    value={firstName}\r\n                                    type=\"text\"\r\n                                    size=\"large\"\r\n                                    autoComplete=\"first-name\"\r\n                                    onChange={(e) => { setFirstName(e.target.value.replace(/[^a-z]/gi, '')); setFirstNameCheck(firstName !== '') }}\r\n                                    helperText={firstName === '' && <Typography sx={{ color: \"#f82249\", fontSize: \"11px\" }}>Enter your first name</Typography>}\r\n                                />\r\n                                <TextField\r\n                                    fullWidth={true}\r\n                                    required\r\n                                    id=\"last-name\"\r\n                                    name=\"last-name\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Last Name\"\r\n                                    size=\"large\"\r\n                                    value={lastName}\r\n                                    type=\"text\"\r\n                                    autoComplete=\"last-name\"\r\n                                    onChange={(e) => { setLastName(e.target.value.replace(/[^a-z]/gi, '')); setLastNameCheck(lastName !== '') }}\r\n                                    helperText={lastName === '' && <Typography sx={{ color: \"#f82249\", fontSize: \"11px\" }}>Enter your last name</Typography>}\r\n                                />\r\n                            </Box>\r\n                            <TextField\r\n                                fullWidth={true}\r\n                                required\r\n                                id=\"Email\"\r\n                                label=\"Email Address\"\r\n                                name=\"Email\"\r\n                                variant=\"outlined\"\r\n                                size=\"large\"\r\n                                value={email}\r\n                                type=\"email\"\r\n                                autoComplete=\"email\"\r\n                                error={!isValidEmail}\r\n                                onChange={(e) => { setEmail(e.target.value); setEmailCheck(email !== ''); setIsValidEmail(mailformat.test(email)) }}\r\n                                helperText={(email === '' && <Typography sx={{ color: \"#f82249\", fontSize: \"11px\" }}>Enter your email</Typography>) ||\r\n                                    (!isValidEmail && <Typography sx={{ color: \"#f82249\", fontSize: \"11px\" }}>Invalid Email Format</Typography>)\r\n                                }\r\n                            />\r\n                            <TextField\r\n                                fullWidth={true}\r\n                                required\r\n                                id=\"major\"\r\n                                label=\"Major/Intended Major\"\r\n                                name=\"major\"\r\n                                variant=\"outlined\"\r\n                                value={major}\r\n                                size=\"large\"\r\n                                type=\"text\"\r\n                                autoComplete=\"major\"\r\n                                onChange={(e) => { setMajor(e.target.value); setMajorCheck(e.target.value !== '') }}\r\n                                helperText={major === '' && <Typography sx={{ color: \"#f82249\", fontSize: \"11px\" }}>Enter your major</Typography>}\r\n                            />\r\n                            <Box\r\n                                sx={{\r\n                                    width: \"100%\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"column\",\r\n                                    gap: \"4px\",\r\n                                }}\r\n                            >\r\n                                <FormGroup>\r\n                                    <InputLabel id=\"gender\">Gender</InputLabel>\r\n                                    <RadioGroup\r\n                                        name=\"gender-select\"\r\n                                        onChange={(e) => { setGender(e.target.value); setGenderCheck(e.target.value !== null) }}\r\n                                    >\r\n\r\n\r\n                                        <FormControlLabel hidden={true} control={<Radio />} label=\"Male\" value=\"male\" />\r\n                                        <FormControlLabel hidden={true} control={<Radio />} label=\"Female\" value=\"female\" />\r\n                                        <FormControlLabel hidden={true} control={<Radio />} label=\"Other\" value=\"other\" />\r\n                                        <FormControlLabel hidden={true} control={<Radio />} label=\"Prefer not to say\" value=\"prefer-not-to-say\" />\r\n\r\n                                    </RadioGroup>\r\n                                    \r\n                                    {gender == null ? (\r\n                                        <FormHelperText sx={{color: \"red\", fontSize: \"11px\",}}>Please select an option</FormHelperText>\r\n                                    ) : null}\r\n                                </FormGroup>\r\n\r\n\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    width: \"100%\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"column nowrap\",\r\n                                    gap: \"8px\"\r\n                                }}\r\n                            >\r\n                                <FormControl size=\"small\">\r\n                                    <InputLabel>Expected Graduation Date</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"school-year-select\"\r\n                                        label=\"Expected Graduation Year\"\r\n                                        value={selectYear}\r\n                                        size=\"large\"\r\n                                        onChange={(e) => setSelectYear(e.target.value)}\r\n                                    >\r\n                                        <MenuItem value={2024}>2024</MenuItem>\r\n                                        <MenuItem value={2025}>2025</MenuItem>\r\n                                        <MenuItem value={2026}>2026</MenuItem>\r\n                                        <MenuItem value={2027}>2027</MenuItem>\r\n                                        <MenuItem value={0}>Other</MenuItem>\r\n\r\n                                    </Select>\r\n                                    {selectYear === 0 ? (\r\n                                        <>\r\n                                            <TextField\r\n                                                id=\"other-year\"\r\n                                                label=\"Other Expected Graduation Year\"\r\n                                                name=\"other-year\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"large\"\r\n                                                type=\"text\"\r\n                                                autoComplete=\"selectYear\"\r\n                                                value={otherSelectYear}\r\n                                                sx={{ marginTop: \"8px\" }}\r\n                                                onChange={(e) => { setOtherSelectYear(e.target.value.replace(/\\D/g, '')); setOtherSelectYearCheck(e.target.value !== '') }}\r\n                                                helperText={otherSelectYear === '' && <Typography sx={{ color: \"#f82249\", fontSize: \"11px\" }}>Enter your expected graduation year</Typography>}\r\n                                            />\r\n                                        </>\r\n                                    ) : null}\r\n                                </FormControl>\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    width: \"100%\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"column nowrap\",\r\n                                    gap: \"4px\"\r\n                                }}\r\n                            >\r\n                                <FormControl size=\"small\">\r\n                                    <InputLabel id=\"school-select\">University of Virginia School</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"school-select\"\r\n                                        label=\"University of Virginia School\"\r\n                                        value={selectSchool}\r\n                                        size=\"large\"\r\n                                        onChange={(e) => setSelectedSchool(e.target.value)}\r\n                                    >\r\n                                        <MenuItem value={\"college\"}>College of Arts and Science</MenuItem>\r\n                                        <MenuItem value={\"engineering\"}>School of Engineering and Applied Science</MenuItem>\r\n                                        <MenuItem value={\"commerce\"}>McIntire School of Commerce</MenuItem>\r\n                                        <MenuItem value={\"architecture\"}>School of Architecture</MenuItem>\r\n                                        <MenuItem value={\"wise\"}>UVA's College at Wise</MenuItem>\r\n                                        <MenuItem value={\"medicine\"}>School of Medicine</MenuItem>\r\n                                        <MenuItem value={\"law\"}>School of Law</MenuItem>\r\n                                        <MenuItem value={\"business\"}>Darden School of Business</MenuItem>\r\n                                        <MenuItem value={\"education\"}>School of Education and Human Development</MenuItem>\r\n                                        <MenuItem value={\"professional\"}>School of Continuing & Professional Studies</MenuItem>\r\n                                        <MenuItem value={\"other\"}>Don't go to UVA</MenuItem>\r\n\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    width: \"100%\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"column nowrap\",\r\n                                    gap: \"4px\"\r\n                                }}\r\n                            >\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    component=\"label\"\r\n                                    sx={{\r\n                                        backgroundColor: \"#f82249\",\r\n                                        color: \"#fff\",\r\n                                        \"&:hover\": {\r\n                                            backgroundColor: \"#fff\",\r\n                                            color: \"#f82249\",\r\n                                            border: \"1px solid\",\r\n                                            borderColor: \"#f82249\",\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {progress < 100 ? \"Optional - Upload Resume\" : resumeName}\r\n                                    <input\r\n                                        type=\"file\"\r\n                                        size=\"large\"\r\n                                        hidden={true}\r\n                                        accept=\"application/msword, application/pdf\"\r\n                                        onChange={(e) => changeResumeHandle(e)}\r\n                                    />\r\n                                </Button>\r\n                                <LinearProgress variant=\"determinate\" value={progress} />\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    width: \"100%\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"column\",\r\n                                    gap: \"8px\",\r\n                                    boxSizing: \"border-box\",\r\n                                }}\r\n                            >\r\n                                <Typography id=\"skills\">\r\n                                    What are some skills that you possess that you think would be helpful\r\n                                    for Ideathon participants? This will be used primarily for team building. *\r\n                                </Typography>\r\n                                <TextField\r\n                                    required\r\n                                    id=\"skills\"\r\n                                    name=\"skills\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"large\"\r\n                                    multiline\r\n                                    maxRows={Infinity}\r\n                                    value={skills}\r\n                                    autoComplete=\"skills\"\r\n                                    onChange={(e) => { setSkills(e.target.value); setSkillsCheck(e.target.value !== '') }}\r\n                                    helperText={skills === '' && <Typography sx={{ color: \"#f82249\", fontSize: \"11px\" }}>Enter your skills or N/A</Typography>}\r\n                                />\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    width: \"100%\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"column\",\r\n                                    gap: \"8px\",\r\n                                    boxSizing: \"border-box\",\r\n                                }}\r\n                            >\r\n                                <Typography id=\"learn\">\r\n                                    What would you like to learn or get out of the Ideathon? *\r\n                                </Typography>\r\n                                <TextField\r\n                                    required\r\n                                    id=\"learn\"\r\n                                    name=\"learn\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"large\"\r\n                                    multiline\r\n                                    maxRows={Infinity}\r\n                                    value={learn}\r\n                                    autoComplete=\"learn\"\r\n                                    onChange={(e) => { setLearn(e.target.value); setLearnCheck(e.target.value !== '') }}\r\n                                    helperText={learn === '' && <Typography sx={{ color: \"#f82249\", fontSize: \"11px\" }}>Enter something you would like to learn or N/A</Typography>}\r\n                                />\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    width: \"100%\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"column\",\r\n                                    gap: \"8px\"\r\n                                }}\r\n                            >\r\n                                <FormGroup\r\n                                >\r\n                                    <InputLabel id=\"dietary-restriction\">Dietary Restrictions</InputLabel>\r\n\r\n                                    <FormControlLabel hidden={true} control={<Checkbox onChange={selectRestrictions} />} label=\"Vegetarian\" value=\"vegetarian\" />\r\n                                    <FormControlLabel hidden={true} control={<Checkbox onChange={selectRestrictions} />} label=\"Gluten Free\" value=\"gluten-free\" />\r\n                                    <FormControlLabel hidden={true} control={<Checkbox onChange={selectRestrictions} />} label=\"Vegan\" value=\"vegan\" />\r\n                                    <FormControlLabel hidden={true} control={<Checkbox onChange={selectRestrictions} />} label=\"Other\" value=\"other\" />\r\n                                    {dietaryRestriction.includes(\"other\") ? (\r\n                                        <>\r\n                                            <InputLabel id=\"dietary-specify-other\">Specify Other Dietary Restriction</InputLabel>\r\n                                            <TextField\r\n                                                id=\"dietary-specify-other\"\r\n                                                name=\"dietary-specify-other\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"large\"\r\n                                                type=\"text\"\r\n                                                value={otherDietaryRestriction}\r\n                                                autoComplete=\"dietary-specify-other\"\r\n                                                onChange={(e) => { setOtherDietaryRestriction(e.target.value); setOtherDietaryRestrictionCheck(e.target.value !== '') }}\r\n                                                helperText={!otherDietaryRestrictionCheck && <Typography sx={{ color: \"#f82249\", fontSize: \"11px\" }}>Enter Your Dietary Restriction</Typography>}\r\n                                            />\r\n                                        </>\r\n                                    ) : null}\r\n\r\n                                </FormGroup>\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"row nowrap\",\r\n                                    gap: \"16px\",\r\n                                }}\r\n                            >\r\n                                {firstNameCheck && lastNameCheck && isValidEmail &&\r\n                                    emailCheck && majorCheck && skillsCheck && genderCheck &&\r\n                                    learnCheck && (selectYear === 0 ? otherSelectYearCheck : true) &&\r\n                                    (dietaryRestriction.includes(\"other\") ? otherDietaryRestrictionCheck : true) ? (\r\n                                    <Button\r\n                                        sx={{\r\n                                            backgroundColor: \"#f82249\",\r\n                                            color: \"#fff\",\r\n                                            boxShadow: 2,\r\n                                            \"&:hover\": {\r\n                                                transform: \"scale3d(1.05, 1.05, 1)\",\r\n                                                backgroundColor: \"#fff\",\r\n                                                color: \"#f82249\",\r\n                                                border: \"1px solid\",\r\n                                                borderColor: \"#f82249\",\r\n                                            }\r\n                                        }}\r\n                                        type=\"submit\"\r\n                                        onClick={() => handleSubmit()}\r\n                                    >\r\n                                        Submit Registration\r\n                                    </Button>\r\n                                ) : (\r\n                                    <Popup\r\n                                        trigger={\r\n                                            <Button\r\n                                                sx={{\r\n                                                    backgroundColor: \"#f82249\",\r\n                                                    color: \"#fff\",\r\n                                                    boxShadow: 2,\r\n                                                    \"&:hover\": {\r\n                                                        transform: \"scale3d(1.05, 1.05, 1)\",\r\n                                                        backgroundColor: \"#fff\",\r\n                                                        color: \"#f82249\",\r\n                                                        border: \"1px solid\",\r\n                                                        borderColor: \"#f82249\",\r\n                                                    }\r\n                                                }}\r\n                                                type=\"submit\"\r\n                                            >\r\n                                                Submit Registration\r\n                                            </Button>\r\n                                        }\r\n                                        on=\"hover\"\r\n                                        position=\"top center\"\r\n                                    >\r\n                                        <Box\r\n                                            sx={{\r\n                                                padding: \"5px\",\r\n                                                textAlign: \"center\",\r\n                                                display: \"flex\",\r\n                                                flexFlow: \"column nowrap\",\r\n                                            }}\r\n                                        >\r\n                                            <Typography>Please fill out the remaining fields.</Typography>\r\n                                        </Box>\r\n                                    </Popup>\r\n                                )}\r\n\r\n                                <Link href=\"https://ideathon.hoohacks.io\">\r\n                                    <Button\r\n                                        sx={{\r\n                                            backgroundColor: \"#fff\",\r\n                                            color: \"#f82249\",\r\n                                            border: \"1px solid\",\r\n                                            borderColor: \"#f82249\",\r\n                                            boxShadow: 2,\r\n                                            \"&:hover\": {\r\n                                                transform: \"scale3d(1.05, 1.05, 1)\",\r\n                                                backgroundColor: \"#f82249\",\r\n                                                color: \"#fff\",\r\n                                            }\r\n                                        }}\r\n                                        type=\"button\"\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                </Link>\r\n                            </Box> */}\r\n                            <Box\r\n                                sx={{\r\n                                    width: \"100%\",\r\n                                    justifyContent: \"center\",\r\n                                    alignItems: \"center\",\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    textAlign: \"center\",\r\n                                    display: \"flex\",\r\n                                }}\r\n                            >\r\n                                <Typography >\r\n                                    Registration for Ideathon has ended! Please reach out to <Link href=\"mailto:hackathon.virginia@gmail.com\">hackathon.virginia@gmail.com</Link> for additional questions.\r\n                                </Typography>\r\n                            </Box>\r\n                        </Card>\r\n                    </Box>\r\n                    <Copyright />\r\n                </Grid>\r\n            </ThemeProvider>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Registration;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport Registration from './Registration';\r\nimport SignUp from './SignUp';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <Registration route=\"/\" />\r\n    {/* <SignUp route=\"signup/\" /> */}\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}